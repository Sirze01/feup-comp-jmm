PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
        < IMPORT : "import" >
        | <CLASS: "class" >
        | <VOID: "void" >
        | <MAIN: "main" >

        | <EXTENDS: "extends" >
        | <PUBLIC: "public" >
        | <STATIC: "static" >
        | <RETURN: "return" >
        | <THIS: "this" >
        | <NEW: "new" >

	    | <INTEGERLITERAL: (<DIGIT>)+ >
        | <DIGIT: ["0" - "9"] >

        | <INT: "int" >
        | <BOOLEAN: "boolean" >
        | <STRING: "String" >

        | <OPENBRACKET: "{" >
        | <CLOSEBRACKET: "}" >
        | <OPENPAREN: "(" >
        | <CLOSEPAREN: ")" >
        | <OPENARRAY: "[" >
        | <CLOSEARRAY: "]" >
        | <SEMICOLON: ";" >
        | <COLON: ":" >
        | <COMMA: "," >
        | <DOT: "." >
        | <LENGTH: "length" >

        | <TRUE: "true" >
        | <FALSE: "false" >
        | <AND: "&&" >
        | <LESS: "<" >
        | <ADD: "+" >
        | <SUB: "-" >
        | <MULT: "*" >
        | <DIV: "/" >
        | <NOT: "!" >
        | <EQUALS: "=" >

        | <IF: "if" >
        | <ELSE: "else" >
        | <WHILE: "while" >

        | <IDENTIFIER: (<LETTER> | <DOLLAR> | <UNDERSCORE> ) (<LETTER> | <DOLLAR> | <UNDERSCORE> | <DIGIT>)* >
        | <LETTER: (<LOWERCASE> | <UPPERCASE>) >
        | <LOWERCASE: ["a"-"z"] >
        | <UPPERCASE: ["A"-"Z"] >
        | <DOLLAR: "$" >
        | <UNDERSCORE: "_" >
;

Start : AdditiveExpression <EOF> ;

AdditiveExpression :
	MultiplicativeExpression
	(
		(< ADD > | < SUB >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< MULT > | < DIV >)
		Factor
	)?
;

Factor :
	< INTEGERLITERAL > |
	< SUB > Factor |
	< OPENPAREN > AdditiveExpression < CLOSEPAREN >
;
